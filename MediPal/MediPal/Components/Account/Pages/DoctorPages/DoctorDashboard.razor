@page "/doctordashboard"

@using MediPal.Components
@using MediPal.Models
@using Microsoft.AspNetCore.Authorization
@using MediPal.Components.Services
@using Microsoft.AspNetCore.Identity

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IPatientService PatientService
@inject ISymptomService SymptomService
@inject INoteService NoteService

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize(Roles = "Doctor")]

<h3 class="fw-bold" style="text-align: center;">Doctor Dashboard</h3>

<br />
<hr />


@if (patients == null)
{
    <p>Loading patients...</p>
}
else
{
    <div style="text-align: center;">
    <h4>Select a Patient</h4>
    <select @onchange="OnPatientChanged">
        <option value="">Select a Patient</option>
        @foreach (var patient in patients)
        {
            <option value="@patient.Id">@patient.FirstName @patient.LastName</option>
        }
    </select>
    </div>

    <br />
    <hr />

    @if (selectedPatient != null)
    {
        <h4 class="fw-bold">Patient Information for @selectedPatient.FirstName @selectedPatient.LastName</h4>
        <table class="table table-striped ">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Date of Birth (mm/dd/yyyy)</th>
                    <th>Gender</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@selectedPatient.FirstName</td>
                    <td>@selectedPatient.LastName</td>
                    <td>@selectedPatient.DateOfBirth</td>
                    <td>@selectedPatient.Gender</td>
                    <td>@selectedPatient.Email</td>
                </tr>
            </tbody>

        </table>

        <br />
        <br />

        <h4 class="fw-bolder">Symptoms</h4>
        if (patientSymptoms != null && patientSymptoms.Count > 0)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Patient Name</th>
                        <th>Symptom Name</th>
                        <th>Date</th>
                        <th>Pain Level</th>
                        <th>Activity</th>
                        <th>Doctor's Note</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var symptom in patientSymptoms)
                    {
                        <tr>
                            <td>@symptom.User.FirstName @symptom.User.LastName</td>
                            <td>@symptom.SymptomName</td>
                            <td>@symptom.Date</td>
                            <td>@symptom.PainLevel</td>
                            <td>@symptom.Activity</td>
                            <td>@symptom.DoctorsNote</td>
                            <td><button @onclick="@(() => DoctorEditSymptom(symptom.SymptomID))" class="btn btn-primary">Edit Doctor's Note</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <br />
        <br />

        <h4 class="fw-bolder">Notes</h4>
        if (patientNotes != null && patientNotes.Count > 0)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Patient Name</th>
                        <th>Note Title</th>
                        <th>Note Description</th>
                        <th>Date</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var note in patientNotes)
                    {
                        <tr>
                            <td>@note.User.FirstName @note.User.LastName</td>
                            <td>@note.NoteTitle</td>
                            <td>@note.NoteDescription</td>
                            <td>@note.Date</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        else
        {
            <p>No information found for this patient.</p>
        }
    }

    <br />
    <br />
}

@code {
    private List<ApplicationUser> patients;
    private ApplicationUser selectedPatient;
    private List<Symptom> patientSymptoms;
    private List<Note> patientNotes;
    private string selectedPatientId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            patients = await PatientService.GetAllPatientsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patients: {ex.Message}");
        }
    }

    private async Task OnPatientChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        selectedPatientId = e.Value.ToString();

        if (!string.IsNullOrEmpty(selectedPatientId))
        {
            try
            {
                selectedPatient = await PatientService.GetPatientByUserIdAsync(selectedPatientId);
                patientSymptoms = await SymptomService.GetSymptomsByPatientIdAsync(selectedPatientId);
                patientNotes = await NoteService.GetNotesByPatientIdAsync(selectedPatientId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving patient information: {ex.Message}");
                selectedPatient = null;
                patientSymptoms = null;
                patientNotes = null;
            }
        }
        else
        {
            selectedPatient = null;
            patientSymptoms = null;
            patientNotes = null;

        }
    }

    void DoctorEditSymptom(int id)
    {
        NavigationManager.NavigateTo($"/doctoreditsymptom/{id}");
    }
}
