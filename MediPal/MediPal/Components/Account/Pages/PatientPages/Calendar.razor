@page "/calendar"

@using MediPal.Components.Services
@using MediPal.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using System.Collections.ObjectModel
@using System.ComponentModel
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Buttons

@inject IAppointmentService AppointmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

@rendermode InteractiveAuto

@attribute [Authorize(Roles = "Admin, Patient, Doctor")]

<PageTitle>Calendar</PageTitle>
<h3>Calendar</h3>

@* <SfButton @onclick="HandleAddAppointment">Add Appointment</SfButton>
<SfButton @onclick="HandleUpdateAppointment" Disabled="ObservableAppointments.Count == 0">Update Appointment</SfButton>
<SfButton @onclick="HandleDeleteAppointment" Disabled="ObservableAppointments.Count == 0">Delete Appointment</SfButton> *@

<SfSchedule TValue="Appointment" @bind-SelectedDate="@CurrentDate" Width="100%" CurrentView="View.Month">
    
    <ScheduleEventSettings DataSource="@AppointmentsCollection">

        <ScheduleField Id="AppointmentId">
            <FieldSubject Name="Subject"></FieldSubject>
            <FieldLocation Name="Location"></FieldLocation>
            <FieldDescription Name="Description"></FieldDescription>
            <FieldIsAllDay Name="IsAllDay"></FieldIsAllDay>
            <FieldStartTime Name="StartTime"></FieldStartTime>
            <FieldEndTime Name="EndTime"></FieldEndTime>
            <FieldStartTimezone Name="StartTimezone"></FieldStartTimezone>
            <FieldEndTimezone Name="EndTimezone"></FieldEndTimezone>
        </ScheduleField>

    </ScheduleEventSettings>

    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
    </ScheduleViews>
</SfSchedule>

@code {

    List<Appointment> AppointmentsCollection = new List<Appointment>();

    DateTime CurrentDate = new DateTime(2024, 10, 2);

    //create variable appointment to support CRUD operation in page
    Appointment appointment { get; set; } = new Appointment();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            AppointmentsCollection = await AppointmentService.GetAppointmentsByUserIdAsync(userId);
        }
    }

    private async Task OnActionComplete(ActionEventArgs<Appointment> args)
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            AppointmentsCollection = await AppointmentService.GetAppointmentsByUserIdAsync(userId);


            if (args.ActionType == ActionType.EventCreate)
            {
                await AppointmentService.AddAppointmentAsync(args.AddedRecords.FirstOrDefault());
            }

            // if (args.ActionType == ActionType.EventChange)
            // {
            //     await AppointmentService.UpdateAppointmentAsync(args.ChangedRecords.FirstOrDefault());
            // }

            // if (args.ActionType == ActionType.EventRemove)
            // {
            //     await AppointmentService.AddAppointmentAsync(args.DeletedRecords.FirstOrDefault());
            // }

            AppointmentsCollection = await AppointmentService.GetAppointmentsByUserIdAsync(userId);
        }

    }

    // async Task HandleAddAppointment()
    // {
    //     await AppointmentService.AddAppointmentAsync(appointment);
    // }

    // async Task HandleEditAppointment(int id)
    // {
    //     await AppointmentService.UpdateAppointmentAsync(appointment, id);
    // }

    // async Task DeleteAppointment(int id)
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     var user = authState.User;

    //     if (user.Identity.IsAuthenticated)
    //     {
    //         var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    //         await AppointmentService.DeleteAppointmentAsync(id, userId);
    //         appointmentList = await AppointmentService.GetAppointmentsByUserIdAsync(userId);
    //         await JSRuntime.InvokeVoidAsync("alert", "Appointment successfully deleted.");
    //     }
    // }
}
