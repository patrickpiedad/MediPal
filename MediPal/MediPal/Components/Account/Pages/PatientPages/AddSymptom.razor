@page "/addsymptom"
@page "/addsymptom/{Id:int}"

@attribute [Authorize]

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MediPal.Components.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject ISymptomService SymptomService
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container-fluid">

    <h3>Add Symptom</h3>

    <div class="row">

        <div class="col-lg-7">
            <EditForm Model="symptom" OnValidSubmit="HandleSubmit" FormName="AddSymptomForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <label class="form-label">Symptom Name</label>
                <InputText class="form-control" @bind-Value="symptom.SymptomName">
                    @symptom.SymptomName
                </InputText>
                @* <ValidationMessage For="@(() => symptom.SymptomName)" /> *@

                <label class="form-label">Date</label>
                <InputDate class="form-control" @bind-Value="symptom.Date">
                    @symptom.Date
                </InputDate>
                @* <ValidationMessage For="@(() => symptom.Date)" /> *@

                <label class="form-label">Pain Level</label>
                <InputNumber class="form-control" @bind-Value="symptom.PainLevel">
                    @symptom.PainLevel
                </InputNumber>
                @* <ValidationMessage For="@(() => symptom.PainLevel)" /> *@

                <label class="form-label">Activity</label>
                <InputText class="form-control" @bind-Value="symptom.Activity">
                    @symptom.Activity
                </InputText>
                @* <ValidationMessage For="@(() => symptom.Activity)" /> *@

                <br />

                <button type="submit" class="btn btn-primary me-3">Submit</button>
                <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
            </EditForm>
        </div>

        <div class="col-lg-5" style="align-content: center;">
            <h4 style="text-align: center;">Pain Scale</h4>
            <img src="/pain-scale.jpg" class="img-fluid" alt="pain scale from 0 to 10 with 0 being the no pain and 10 being unimaginable pain" />
        </div>

    </div>
</div>

@code {
    [SupplyParameterFromForm] // connects the form input for each parameter above and passes it to the creation of the new symptom
    Symptom symptom { get; set; } = new Symptom();

    private string UserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }

        else
        {
            NavigationManager.NavigateTo("/Account/Login");
        }


    }

    async Task HandleSubmit()
    {
        // This is adding the current authenticated userId (found as only Id in the ASPNETUsers table) as the foreign key in the new symptom
        symptom.UserId = UserId;

        await SymptomService.AddSymptomAsync(symptom);
        NavigationManager.NavigateTo("/symptomlist");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/symptomlist");
    }

    [Parameter]
    public int Id { get; set; }
}
