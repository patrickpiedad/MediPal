@page "/symptomlist"

@using MediPal.Components.Services
@using MediPal.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject ISymptomService SymptomService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize(Roles = "Admin, Patient, Doctor")]

<PageTitle>My Symptoms</PageTitle>
<h3 style="text-align: center" class="fw-bold">My Symptoms</h3>

<br />

@if (symptoms == null || symptoms.Any() == false)
{
    <div>
    <span>No symptoms found.</span>
    </div>
    <button @onclick="AddSymptom" class="btn btn-primary">Add Symptom</button>
}

@* @if (symptoms.Count == 0)
{
    <div>
        <span>Loading symptoms...</span>
    </div>

} *@

else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Symptom Name</th>
                <th>Date</th>
                <th>Pain Level</th>
                <th>Activity</th>
                <th>Doctor's Note</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var symptom in symptoms)
            {
                <tr>
                    <td>@symptom.SymptomName</td>
                    <td>@symptom.Date</td>
                    <td>@symptom.PainLevel</td>
                    <td>@symptom.Activity</td>
                    <td>@symptom.DoctorsNote</td>
                    <td><button @onclick="@(() => EditSymptom(symptom.SymptomID))" class="btn btn-primary">Edit Symptom</button></td>
                    <td><button @onclick="@(() => DeleteSymptom(symptom.SymptomID))" class="btn btn-danger">Delete Symptom</button></td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <button @onclick="AddSymptom" class="btn btn-primary">Add Symptom</button>
    </div>
}

@code {
    List<Symptom> symptoms = new List<Symptom>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            symptoms = await SymptomService.GetSymptomsByUserIdAsync(userId);
        }

        else
        {
            symptoms = new List<Symptom>();
        }

    }

    void AddSymptom()
    {
        NavigationManager.NavigateTo("/addsymptom");
    }

    void EditSymptom(int id)
    {
        NavigationManager.NavigateTo($"/editsymptom/{id}");
    }

    void DoctorEditSymptom(int id)
    {
        NavigationManager.NavigateTo($"/doctoreditsymptom/{id}");
    }

    async Task DeleteSymptom(int id)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            await SymptomService.DeleteSymptomAsync(id, userId);
            symptoms = await SymptomService.GetSymptomsByUserIdAsync(userId);
            await JSRuntime.InvokeVoidAsync("alert", "Symptom successfully deleted.");
        }
    }
}