@page "/description"

<PageTitle>Project Overview</PageTitle>

<h2 style="text-align: center;" class="fw-bold">Welcome to MediPal!</h2>
<hr />

<br />

<h4 style="text-align: center;" class="fst-italic">MediPal is open-source medical software that gives users true access to their holistic health picture. This application is meant to simplify getting the information that users want in a way they are able to understand.</h4>

<br />
<hr />
<br />

<h4 class="fw-bold">Featured Implementations</h4>
<br />
<h5 class="fw-bolder">Major Features</h5>
<ul>

    <li>Model-View-ViewModel (MVVM) Architecture</li>
    <ul>
        <li>Model (database, models such as Symptom and ApplicationUser)</li>
        <li>ViewModel (Code blocks in razor files, commands, and services interfaces)</li>
        <li>View (razor components and HTML templates</li>
    </ul>
    <li>Account creation with full form validation and error handling</li>
    <li>Full CRUD functionality MS SQL Server database</li>
    <ul>
        <li>Symptoms</li>
        <li>Notes</li>
    </ul>
    <li>ASP.NET Core Identity implementation with authentication and authorization</li>
    <li>Current user authentication state handling to display user-specific data</li>
    <li>Create calendar appointment functionality (Syncfusion), display in multiple formats</li>
    <li>Doctor Dashboard allowing for selection of patient by name (read by patientId) and edit of symptom doctor note portion only</li>
</ul>

<br />

<h5 class="fw-bolder">Smaller Details</h5>
<ul>

    <li>Models containing properties with backing fields and constructor</li>
    <li>List collection to hold symptoms (accessed through interface)</li>
    <li>List collection to hold doctors (hard coded)</li>
    <li>Button interactivity to validate properties with model and allow/not allow for form submit as appropriate</li>
    <li>Logic to execute specific actions if collections do not show, async functionality, JavaScript interaction when deleting symptoms for user-feedback.</li>
    <li>Model classes for base object structure</li>
    <li>Service interfaces to allow for abstracted interaction with async functions and loosely coupled components</li>
    <li>Foreign key implementation in relational database (MS SQL Server)</li>
    <li>Authorization role based access for specific pages and components</li>
    <li>Populate user dashboard items with user account information using current user authentication</li>
    <li>Database seeding to ensure admin account, roles, and other features are always added to database in new environments</li>

</ul>

<br />
<hr />
<br />

<h4 class="fw-bold">Phase 1 (Patient Management) Backlog</h4>
<ul>
    <li>Fully customize UI with built in Bootstrap CSS</li>
    <li>Integrate OAuth or OpenID on BlazorServer side using cookies after authentication is complete</li>
    <li>Complete authentication and authorization of user accounts, to include 2FA, external authentication, and account creation/login through external providers.</li>
    <li>File upload</li>
    <li>Timeline display based on calendar component</li>
</ul>

<br />
<hr />
<br />

<h4 class="fw-bold">Phase 2 (Cloud Migration & API Implementation) Backlog</h4>
<ul>

    <li>Chatbot functionality</li>
    <li>Additional role implementation with other views, such as Doctor, Nurse, Social Worker, etc...</li>
    <li>Azure Search API integration</li>
    <li>Open AI API integration</li>
</ul>

<br />
<hr />
<br />
