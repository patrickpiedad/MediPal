@page "/description"

<PageTitle>Project Overview</PageTitle>

<h1 style="text-align: center;">Welcome to MediPal!</h1>

<br />

<h2 style="text-align: center;">MediPal is open-source medical software that gives users true access to their holistic health picture. This application is meant to simplify getting the information that users want in a way they are able to understand.</h2>

<br />
<hr />
<br />

<h3>Featured Implementations</h3>
<br />
<h5>Major Features</h5>
<ul>

    <li>Model-View-ViewModel (MVVM) Architecture</li>
    <ul>
        <li>Model (database, models such as Symptom and ApplicationUser)</li>
        <li>ViewModel (Code blocks in razor files, commands, and services interfaces)</li>
        <li>View (razor components and HTML templates</li>
    </ul>
    <li>Account creation with full form validation and error handling</li>
    <li>Full CRUD functionality for symptoms with connection to MS SQL Server database</li>
    <li>ASP.NET Core Identity implementation with authentication and authorization</li>
    <li>Current user authentication state handling to display user-specific data</li>
</ul>

    <br />

<h5>Smaller Details</h5>
<ul>

    <li>Models containing properties with backing fields and constructor</li>
    <li>List collection to hold symptoms (accessed through interface)</li>
    <li>List collection to hold doctors (hard coded)</li>
    <li>Button interactivity to validate properties with model and allow/not allow for form submit as appropriate</li>
    <li>Logic to execute specific actions if collections do not show, async functionality, JavaScript interaction when deleting symptoms for user-feedback.</li>
    <li>Model classes for base object structure</li>
    <li>Service interfaces to allow for abstracted interaction with async functions</li>
    <li>Multiple roles available for account creation</li>
    <li>Foreign key implementation in relational database (MS SQL Server)</li>
    <li>Authorization role based access for specific pages and components</li>

</ul>

<br />
<hr />
<br />

<h3>Phase 1 (Patient Management) Backlog</h3>
<ul>
    <li>Add general notes page for patient to keep track of thoughts by date</li>
    <li>Link 1x doctor role account with multiple patient accounts, allowing doctor to edit the "doctor's notes" part of the assigned patient's symptom list</li>
    <li>Add doctor specific pages that allows them to select their assigned patient (need to implement more foreign keys), and view that patient's symptoms</li>
    <li>Database seeding to ensure admin account, roles, and other features are always added to database in new environments</li>
    <li>Populate user dashboard items with user account information</li>
    <li>Create calendar appointment functionality and display appointments based off of calendar on week outlook</li>
    <li>Fully customize UI with built in Bootstrap CSS</li>
    <li>Integrate OAuth or OpenID on BlazorServer side using cookies after authentication is complete</li>
    <li>Complete authentication and authorization of user accounts, to include 2FA, external authentication, and account creation/login through external providers.</li>
    <li>File upload</li>
    <li>Timeline display based on larger calendar, consider using UI library such as SyncFusion</li>
</ul>

<br />
<hr />
<br />

<h3>Phase 2 (Cloud Migration & API Implementation) Backlog</h3>
<ul>

    <li>Chatbot functionality</li>
    <li>Additional role implementation with other views, such as Doctor, Nurse, Social Worker, etc...</li>
    <li>Azure Search API integration</li>
    <li>Open AI API integration</li>
</ul>

<br />
<hr />
<br />

<div style="text-align:center;">
    <img src="/landingPage.png" height="800" />
</div>
