@page "/"

@using MediPal.Components
@using MediPal.Models
@using Microsoft.AspNetCore.Authorization
@using MediPal.Components.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity

@* Syncfusion Calendar Using *@
@using System.Collections.ObjectModel
@using System.ComponentModel
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Buttons



@inject ISymptomService SymptomService
@inject INoteService NoteService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@* Syncfusion Calendar Injects *@
@inject IAppointmentService AppointmentService
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext DbContext

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize(Roles = "Admin, Patient, Doctor")]

<AuthorizeView>
    <PageTitle>Dashboard</PageTitle>

    <div class="container-fluid">

        @* start row 1 *@
        <div class="row">

            @*Patient Information*@
            <div class="col-lg-4 d-flex">
                <div class="card border h-100 w-100">
                    <div class="card-body" style="text-align: center;">
                        @* need to detach this into a separate component and link to it here *@
                        <h5 class="card-title fw-bold">Patient Information</h5>
                        <hr />
                        @if (currentUser != null)
                        {
                            <p class="card-text">Name: @currentUser.FirstName @currentUser.LastName</p>
                            <p class="card-text">Date of Birth: @currentUser.DateOfBirth</p>
                            @* <p class="card-text">Medical Diagnosis: Leukemia</p> *@
                        }
                        else
                        {
                            <p class="card-text">Loading...</p>
                        }
                        @* <a href="#" class="btn btn-primary">View Details</a> *@
                    </div>
                </div>
            </div>

            @*My Medical Team*@
            <div class="col-lg-4 d-flex">
                <div class="card border h-100 w-100">
                    <div class="card-body" style=" text-align: center;">

                        <h5 class="card-title fw-bold" style="text-align: center">My Medical Team</h5>
                        <hr />

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>First Name</th>
                                    <th>Last Name</th>
                                    <th>Role</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var doctor in doctors)
                                {
                                    <tr>
                                        <td>@doctor.Title</td>
                                        <td>@doctor.FirstName</td>
                                        <td>@doctor.LastName</td>
                                        <td>@doctor.Role</td>
                                    </tr>
                                }
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>

            @*My Profile*@
            <div class="col-lg-4 d-flex">
                <div class="card border h-100 w-100">
                    <div class="card-body" style=" text-align: center;">
                        @* need to detach this into a separate component and link to it here *@
                        <h5 class="card-title fw-bold">My Profile</h5>
                        <hr />
                        @if (currentUser != null)
                        {
                            <p class="card-text">@currentUser.FirstName @currentUser.LastName</p>
                        }
                        <a href="Account/Manage" class="btn btn-primary">Settings</a>
                    </div>
                </div>
            </div>

        </div>
    </div>

    @*
    <NavLink class="nav-link" href="Account/Manage">
    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
    </NavLink> *@

    <br />
    <br />

    @* start row 2 *@
    <div class="row">

        @*Week Outlook*@
        <div class="col-lg-12">
            <div class="card border">
                <div class="card-body" style=" text-align: center;">
                    <h5 class="card-title fw-bold">Week Outlook</h5>
                    <br />
                    <SfSchedule CssClass="min-height-calendar" TValue="Appointment" EnableAutoRowHeight="true" AllowMultiRowSelection="false" AllowDragAndDrop="false" AllowMultiCellSelection="false" AllowMultiDrag="false" CurrentView="View.Agenda" Readonly="true" Width="100%">

                        <ScheduleEvents TValue="Appointment"></ScheduleEvents>

                        <ScheduleEventSettings DataSource="@AppointmentsCollection">
                            <ScheduleField Id="AppointmentId">
                                <FieldSubject Name="Subject"></FieldSubject>
                                <FieldLocation Name="Location"></FieldLocation>
                                <FieldDescription Name="Description"></FieldDescription>
                                <FieldIsAllDay Name="IsAllDay"></FieldIsAllDay>
                                <FieldStartTime Name="StartTime"></FieldStartTime>
                                <FieldEndTime Name="EndTime"></FieldEndTime>
                                <FieldStartTimezone Name="StartTimezone"></FieldStartTimezone>
                                <FieldEndTimezone Name="EndTimezone"></FieldEndTimezone>
                            </ScheduleField>
                        </ScheduleEventSettings>

                        <ScheduleViews>
                            <ScheduleView Option="View.Agenda"></ScheduleView>
                        </ScheduleViews>

                    </SfSchedule>

                </div>
            </div>
        </div>
    </div>

    <br />
    <br />

    @* start row 3 *@
    <div class="row">

        @*Symptom Tracker*@
        <div class="col-lg-6">
            <div class="card border h-100 w-100">
                <div class="card-body" style=" text-align: center;">
                    <h5 class="card-title fw-bold">Symptom Tracker</h5>
                    <hr />
                    <table class="table table-striped">

                        @if (symptoms == null || symptoms.Any() == false)
                        {
                            <div>
                                <span>No symptoms found.</span>
                            </div>
                        }

                        else
                        {
                            <thead>
                                <tr>
                                    <th>Symptom</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                        }
                        <tbody>
                            @foreach (var symptom in symptoms)
                            {
                                <tr>
                                    <td>@symptom.SymptomName</td>
                                    <td>@symptom.Date</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        @*Note Tracker*@
        <div class="col-lg-6">
            <div class="card border h-100 w-100">
                <div class="card-body" style=" text-align: center;">
                    <h5 class="card-title fw-bold">Note Tracker</h5>
                    <hr />
                    <table class="table table-striped">

                        @if (notes == null || notes.Any() == false)
                        {
                            <div>
                                <span>No notes found.</span>
                            </div>
                        }

                        else
                        {
                            <thead>
                                <tr>
                                    <th>Note</th>
                                    <th>Description</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                        }
                        <tbody>
                            @foreach (var note in notes)
                            {
                                <tr>
                                    <td>@note.NoteTitle</td>
                                    <td>@note.Date</td>
                                    <td>@note.NoteDescription</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>

    <br />
    <br />

</AuthorizeView>


@code {
    List<Symptom> symptoms = new List<Symptom>();
    List<Note> notes = new List<Note>();
    List<Doctor> doctors = new List<Doctor>();

    private ClaimsPrincipal? user;
    private ApplicationUser? currentUser;


    protected override async Task OnInitializedAsync()
    {
        //get current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;



        // get all symptoms and notes from database, using symptomservice and noteservice interface SPECIFIC to the user logged in
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            symptoms = await SymptomService.GetSymptomsByUserIdAsync(userId);
            notes = await NoteService.GetNotesByUserIdAsync(userId);

            // Get current user details
            currentUser = await UserManager.FindByIdAsync(userId);

            // Get calendar appointment information
            AppointmentsCollection = await AppointmentService.GetAppointmentsByUserIdAsync(userId);
        }

        else
        {
            symptoms = new List<Symptom>();
            notes = new List<Note>();
        }

        // Need to add doctors in OnInitializedAsync to have them load on program load, this is not connected to the database, need to add later
        doctors.Add(new Doctor("Kathy", "Awesome", DateOnly.Parse("October 21, 1985"), "M.D.", "Chief Medical Officer"));
        doctors.Add(new Doctor("Richard", "Cool", DateOnly.Parse("May 4, 1989"), "M.D.", "Lead Doctor"));
        doctors.Add(new Doctor("Arnie", "Neat", DateOnly.Parse("October 21, 1993"), "M.D.", "Assistant Doctor"));
    }

    List<Appointment> AppointmentsCollection = new List<Appointment>();
    private DateTime CurrentDate = DateTime.Now;
}
