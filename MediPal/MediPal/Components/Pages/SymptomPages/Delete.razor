@page "/symptoms/delete"

@using Microsoft.EntityFrameworkCore
@using MediPal.Models
@inject IDbContextFactory<MediPal.Data.MediPalContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Symptom</h4>
    <hr />
    @if (symptom is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">SymptomName</dt>
            <dd class="col-sm-10">@symptom.SymptomName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@symptom.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PainLevel</dt>
            <dd class="col-sm-10">@symptom.PainLevel</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Activity</dt>
            <dd class="col-sm-10">@symptom.Activity</dd>
        </dl>
        <EditForm method="post" Model="symptom" OnValidSubmit="DeleteSymptom" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(symptom is null)">Delete</button> |
            <a href="/symptoms">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Symptom? symptom;

    [SupplyParameterFromQuery]
    public int SymptomID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        symptom = await context.Symptom.FirstOrDefaultAsync(m => m.SymptomID == SymptomID);

        if (symptom is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteSymptom()
    {
        using var context = DbFactory.CreateDbContext();
        context.Symptom.Remove(symptom!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/symptoms");
    }
}
