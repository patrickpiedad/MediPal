@page "/Symptoms/edit"

@using Microsoft.EntityFrameworkCore
@using MediPal.Models
@inject IDbContextFactory<MediPal.Data.MediPalContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Symptom</h4>
<hr />
@if (Symptom is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Symptom" OnValidSubmit="UpdateSymptom" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Symptom.SymptomID" value="@Symptom.SymptomID" />
                <div class="mb-3">
                    <label for="symptomname" class="form-label">SymptomName:</label>
                    <InputText id="symptomname" @bind-Value="Symptom.SymptomName" class="form-control" />
                    <ValidationMessage For="() => Symptom.SymptomName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="Symptom.Date" class="form-control" />
                    <ValidationMessage For="() => Symptom.Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="painlevel" class="form-label">PainLevel:</label>
                    <InputNumber id="painlevel" @bind-Value="Symptom.PainLevel" class="form-control" />
                    <ValidationMessage For="() => Symptom.PainLevel" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="activity" class="form-label">Activity:</label>
                    <InputText id="activity" @bind-Value="Symptom.Activity" class="form-control" />
                    <ValidationMessage For="() => Symptom.Activity" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/symptoms">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int SymptomID { get; set; }

    [SupplyParameterFromForm]
    public Symptom? Symptom { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Symptom ??= await context.Symptom.FirstOrDefaultAsync(m => m.SymptomID == SymptomID);

        if (Symptom is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSymptom()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Symptom!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SymptomExists(Symptom!.SymptomID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/symptoms");
    }

    bool SymptomExists(int symptomid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Symptom.Any(e => e.SymptomID == symptomid);
    }
}
