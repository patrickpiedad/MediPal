@page "/symptomlists"

@using Microsoft.EntityFrameworkCore
@* @using Microsoft.AspNetCore.Components.QuickGrid *@
@using MediPal.Models
@using MediPal.Data
@* @inject IDbContextFactory<MediPal.Data.MediPalContext> DbFactory *@
@* @implements IAsyncDisposable *@

<PageTitle>Symptom Tracker</PageTitle>

<h3>Symptom Tracker</h3>
@* <h1>Index</h1> *@

@* <QuickGrid Class="table" Items="context.SymptomList">
    <PropertyColumn Property="symptomlist => symptomlist.Symptom" />
    <PropertyColumn Property="symptomlist => symptomlist.Date" />
    <PropertyColumn Property="symptomlist => symptomlist.PainLevel" />
    <PropertyColumn Property="symptomlist => symptomlist.Activity" />

    <TemplateColumn Context="symptomlist">
        <a href="@($"symptomlists/edit?symptomid={symptomlist.SymptomID}")">Edit</a> |
        <a href="@($"symptomlists/details?symptomid={symptomlist.SymptomID}")">Details</a> |
        <a href="@($"symptomlists/delete?symptomid={symptomlist.SymptomID}")">Delete</a>
    </TemplateColumn>
</QuickGrid> *@


@* <MudDataGrid Items="SymptomList" Filterable="true" SortMode="@SortMode.None" Groupable="false">

    <Columns>
        <PropertyColumn Property="symptomlist => symptomlist.Symptom" />
        <PropertyColumn Property="symptomlist => symptomlist.Date" />
        <PropertyColumn Property="symptomlist => symptomlist.PainLevel" title="Pain Level" />
        <PropertyColumn Property="symptomlist => symptomlist.Activity" />


        <TemplateColumn>
            <MudButton onclick="symptomlists/edit?symptomid="symptomlist.SymptomID" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Edit </MudButton>
        </TemplateColumn>

    </Columns>

    @*     <TemplateColumn Context="symptomlist">
    <a href="@($"symptomlists/edit?symptomid={symptomlist.SymptomID}")">Edit</a> |
    <a href="@($"symptomlists/details?symptomid={symptomlist.SymptomID}")">Details</a> |
    <a href="@($"symptomlists/delete?symptomid={symptomlist.SymptomID}")">Delete</a>
    </TemplateColumn> *@

@* </MudDataGrid> *@

<MudDataGrid T="SymptomList" Items="@SymptomList" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <PropertyColumn Property="SymptomList => SymptomList.Symptom" Title="Nr" Editable="false" />
        <PropertyColumn Property="SymptomList => SymptomList.Date" />
        <PropertyColumn Property="SymptomList => SymptomList.PainLevel" />
        <PropertyColumn Property="SymptomList => SymptomList.Activity" />
            <EditTemplate>
                <MudSelect @bind-Value="SymptomList" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                </MudSelect>
            </EditTemplate>

        <PropertyColumn Property="SymptomList => SymptomList" Title="Molar mass" />
        <TemplateColumn Hidden="@(_isCellEditMode || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
        <MudSwitch @bind-Value="_isCellEditMode">Cell</MudSwitch>
    </div>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
        <MudSwitch @bind-Value="_editTriggerRowClick">On Row Click</MudSwitch>
    </div>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    // private IEnumerable<SymptomList> SymptomList;


    // public List<SymptomList> SymptomList;

       
    private IList<SymptomList> SymptomList = new List<SymptomList>();
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;


    protected override void OnInitialized()
    {
        SymptomList = new List<SymptomList>();
        SymptomList.Add(new SymptomList { SymptomID = 1, Symptom = "Cough", Date = DateOnly.FromDateTime(DateTime.Now), PainLevel = 3, Activity = "Work" });
        SymptomList.Add(new SymptomList { SymptomID = 2, Symptom = "Headache", Date = DateOnly.FromDateTime(DateTime.Now), PainLevel = 5, Activity = "Sleeping" });
        SymptomList.Add(new SymptomList { SymptomID = 3, Symptom = "Chills", Date = DateOnly.FromDateTime(DateTime.Now), PainLevel = 5, Activity = "Work" });
        SymptomList.Add(new SymptomList { SymptomID = 4, Symptom = "Running nose", Date = DateOnly.FromDateTime(DateTime.Now), PainLevel = 5, Activity = "Working out" });
        SymptomList.Add(new SymptomList { SymptomID = 5, Symptom = "Body aches", Date = DateOnly.FromDateTime(DateTime.Now), PainLevel = 5, Activity = "Work" });
        SymptomList.Add(new SymptomList { SymptomID = 6, Symptom = "Headache", Date = DateOnly.FromDateTime(DateTime.Now), PainLevel = 5, Activity = "Reading" });

    }

    // protected override async Task OnInitializedAsync()
    // {
    //     Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    // }

    // events
    void StartedEditingItem(SymptomList item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(SymptomList item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(SymptomList item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}

    


 @*    // Uncomment everything below for SQLite database context integration

    // MediPalContext context = default!;


    // protected override void OnInitialized()
    // {
    //     context = DbFactory.CreateDbContext();
    // }

    // public async ValueTask DisposeAsync() => await context.DisposeAsync(); *@
}
