@page "/symptomlists/delete"

@using Microsoft.EntityFrameworkCore
@using MediPal.Models
@* @inject IDbContextFactory<MediPal.Data.MediPalContext> DbFactory
@inject NavigationManager NavigationManager
 *@

<PageTitle>Delete</PageTitle>

@* <h1>Delete</h1> *@

<h3>Are you sure you want to delete this?</h3>
<div>
    @* <h4>SymptomList</h4> *@
    <hr />
    @if (Symptom is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Symptom</dt>
            <dd class="col-sm-10">@Symptom.SymptomName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@Symptom.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Pain Level</dt>
            <dd class="col-sm-10">@Symptom.PainLevel</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Activity</dt>
            <dd class="col-sm-10">@Symptom.Activity</dd>
        </dl>
        <EditForm method="post" Model="Symptom" OnValidSubmit="DeleteSymptomList" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(Symptom is null)">Delete</button> |
            <a href="/symptomlists">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Symptom? Symptom;

    [SupplyParameterFromQuery]
    public int? SymptomID { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     symptomlist = await context.SymptomList.FirstOrDefaultAsync(m => m.SymptomID == SymptomID);

    //     if (symptomlist is null)
    //     {
    //         NavigationManager.NavigateTo("notfound");
    //     }
    // }

    public async Task DeleteSymptomList()
    {
        // using var context = DbFactory.CreateDbContext();
        // context.SymptomList.Remove(symptomlist!);
        // await context.SaveChangesAsync();
        // NavigationManager.NavigateTo("/symptomlists");
    }
}
