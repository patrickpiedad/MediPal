@page "/SymptomLists/edit"

@using Microsoft.EntityFrameworkCore
@using MediPal.Models
@* @inject IDbContextFactory<MediPal.Data.MediPalContext> DbFactory
@inject NavigationManager NavigationManager *@

<PageTitle>Edit</PageTitle>

@* <h1>Edit</h1> *@

@* <h4>SymptomList</h4> *@
<hr />
@if (SymptomList is null)
{
    <p><em>Loading...</em></p>
}
else
{
@*     <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="SymptomList" OnValidSubmit="UpdateSymptomList" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="SymptomList.SymptomID" value="@SymptomList.SymptomID" />
                <div class="mb-3">
                    <label for="symptom" class="form-label">Symptom:</label>
                    <InputText id="symptom" @bind-Value="SymptomList.Symptom" class="form-control" />
                    <ValidationMessage For="() => SymptomList.Symptom" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="SymptomList.Date" class="form-control" />
                    <ValidationMessage For="() => SymptomList.Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="painlevel" class="form-label">Pain Level:</label>
                    <InputNumber id="painlevel" @bind-Value="SymptomList.PainLevel" class="form-control" />
                    <ValidationMessage For="() => SymptomList.PainLevel" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="activity" class="form-label">Activity:</label>
                    <InputText id="activity" @bind-Value="SymptomList.Activity" class="form-control" />
                    <ValidationMessage For="() => SymptomList.Activity" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div> *@
}

<div>
    <a href="/symptomlists">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int? SymptomID { get; set; }

    [SupplyParameterFromForm]
    public SymptomList? SymptomList { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     SymptomList ??= await context.SymptomList.FirstOrDefaultAsync(m => m.SymptomID == SymptomID);

    //     if (SymptomList is null)
    //     {
    //         NavigationManager.NavigateTo("notfound");
    //     }
    // }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    // public async Task UpdateSymptomList()
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     context.Attach(SymptomList!).State = EntityState.Modified;

    //     try
    //     {
    //         await context.SaveChangesAsync();
    //     }
    //     catch (DbUpdateConcurrencyException)
    //     {
    //         if (!SymptomListExists(SymptomList!.SymptomID))
    //         {
    //             NavigationManager.NavigateTo("notfound");
    //         }
    //         else
    //         {
    //             throw;
    //         }
    //     }

    //     NavigationManager.NavigateTo("/symptomlists");
    // }

    // bool SymptomListExists(int? symptomid)
    // {
    //     using var context = DbFactory.CreateDbContext();
    //     return context.SymptomList.Any(e => e.SymptomID == symptomid);
    // }
}
